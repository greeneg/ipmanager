basePath: /api/v1
definitions:
  controllers.SafeUser:
    properties:
      creationDate:
        type: string
      id:
        type: integer
      userName:
        type: string
    type: object
  model.Domain:
    properties:
      CreationDate:
        type: string
      CreatorId:
        type: integer
      DomainName:
        type: string
      Id:
        type: integer
    type: object
  model.DomainList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Domain'
        type: array
    type: object
  model.FailureMsg:
    properties:
      error:
        type: string
    type: object
  model.Host:
    properties:
      CreationDate:
        type: string
      CreatorId:
        type: integer
      HostName:
        type: string
      Id:
        type: integer
      MacAddresses:
        items:
          type: string
        type: array
    type: object
  model.HostList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Host'
        type: array
    type: object
  model.MacAddressList:
    properties:
      data:
        items:
          type: string
        type: array
    type: object
  model.PasswordChange:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    type: object
  model.ProposedUser:
    properties:
      CreationDate:
        type: string
      Id:
        type: integer
      Password:
        type: string
      Status:
        type: string
      UserName:
        type: string
    type: object
  model.Subnet:
    properties:
      BitMask:
        type: integer
      CreationDate:
        type: string
      CreatorId:
        type: integer
      DomainId:
        type: integer
      GatewayAddress:
        type: string
      Id:
        type: integer
      NetworkName:
        type: string
      NetworkPrefix:
        type: string
    type: object
  model.Subnets:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Subnet'
        type: array
    type: object
  model.SuccessMsg:
    properties:
      message:
        type: string
    type: object
  model.User:
    properties:
      CreationDate:
        type: string
      Id:
        type: integer
      LastChangedDate:
        type: string
      PasswordHash:
        type: string
      Status:
        type: string
      UserName:
        type: string
    type: object
  model.UserStatusMsg:
    properties:
      message:
        type: string
      userStatus:
        type: string
    type: object
  model.UsersList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
host: localhost:8000
info:
  contact:
    name: Gary Greene
    url: https://github.com/greeneg/ipmanager
  description: A simple API for managing networks
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: IpManager API
  version: 0.0.6
paths:
  /domain:
    post:
      consumes:
      - application/json
      description: Create a new domain
      parameters:
      - description: Domain data
        in: body
        name: domain
        required: true
        schema:
          $ref: '#/definitions/model.Domain'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Create a new domain
      tags:
      - domain
  /domain/{domainname}:
    delete:
      description: Delete a domain
      parameters:
      - description: Domain name
        in: path
        name: domainname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete a domain
      tags:
      - domain
  /domain/id/{domainid}:
    get:
      description: Retrieve a domain by Id
      parameters:
      - description: Domain Id
        in: path
        name: domainid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Domain'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a domain by Id
      tags:
      - domain
  /domain/name/{domainname}:
    get:
      description: Retrieve a domain by DomainName
      parameters:
      - description: Domain name
        in: path
        name: domainname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Domain'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a domain by DomainName
      tags:
      - domain
  /domains:
    get:
      description: Retrieve a list of domain
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DomainList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a list of domain
      tags:
      - domain
  /host:
    post:
      consumes:
      - application/json
      description: Add a new host
      parameters:
      - description: Host Data
        in: body
        name: host
        required: true
        schema:
          $ref: '#/definitions/model.Host'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register host
      tags:
      - host
  /host/{hostname}:
    delete:
      consumes:
      - application/json
      description: Delete a host
      parameters:
      - description: Hostname
        in: path
        name: hostname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete a host
      tags:
      - host
    patch:
      consumes:
      - application/json
      description: Update MAC address list
      parameters:
      - description: Hostname
        in: path
        name: hostname
        required: true
        type: string
      - description: MAC address list
        in: body
        name: updateMacAddresses
        required: true
        schema:
          $ref: '#/definitions/model.MacAddressList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Update MAC address list
      tags:
      - host
  /host/id/{hostid}:
    get:
      description: Retrieve a host by its Id
      parameters:
      - description: host Id
        in: path
        name: hostid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Host'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a host by its Id
      tags:
      - host
  /host/name/{hostname}:
    get:
      description: Retrieve a host by its hostname
      parameters:
      - description: hostname
        in: path
        name: hostname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Host'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a host by its hostname
      tags:
      - host
  /hosts:
    get:
      description: Retrieve list of all hosts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HostList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve list of all hosts
      tags:
      - host
  /subnet:
    post:
      consumes:
      - application/json
      description: Add a new subnet
      parameters:
      - description: Subnet Data
        in: body
        name: subnet
        required: true
        schema:
          $ref: '#/definitions/model.Subnet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register subnet
      tags:
      - subnet
  /subnet/{networkname}:
    delete:
      consumes:
      - application/json
      description: Delete a subnet
      parameters:
      - description: Network name
        in: path
        name: networkname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete subnet
      tags:
      - subnet
  /subnet/id/{subnetname}:
    get:
      description: Retrieve a subnet by its Id
      parameters:
      - description: Subnet Id
        in: path
        name: subnetid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Subnet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a subnet by its Id
      tags:
      - subnet
  /subnet/name/{subnetname}:
    get:
      description: Retrieve a subnet by its network name
      parameters:
      - description: Subnet name
        in: path
        name: subnetname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Subnet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a subnet by its network name
      tags:
      - subnet
  /subnets:
    get:
      description: Retrieve list of all subnets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Subnets'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve list of all subnets
      tags:
      - subnet
  /subnets/domain/id/{domainid}:
    get:
      description: Retrieve a list of subnets assigned to a domain Id
      parameters:
      - description: Domain name
        in: path
        name: domainname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Subnets'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a list of subnets assigned to a domain Id
      tags:
      - subnet
  /subnets/domain/name/{domainname}:
    get:
      description: Retrieve a list of subnets assigned to a domain name
      parameters:
      - description: Domain name
        in: path
        name: domainname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Subnets'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a list of subnets assigned to a domain name
      tags:
      - subnet
  /user:
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.ProposedUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register user
      tags:
      - user
  /user/{name}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Change password
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      - description: Password data
        in: body
        name: changePassword
        required: true
        schema:
          $ref: '#/definitions/model.PasswordChange'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Change password
      tags:
      - user
  /user/{name}/status:
    get:
      consumes:
      - application/json
      description: Retrieve a user's active status
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserStatusMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a user's active status. Can be either 'enabled' or 'locked'
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Set a user's active status
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserStatusMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Set a user's active status. Can be either 'enabled' or 'locked'
      tags:
      - user
  /user/id/{id}:
    get:
      description: Retrieve a user by their Id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SafeUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a user by their Id
      tags:
      - user
  /user/name/{name}:
    get:
      description: Retrieve a user by their UserName
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SafeUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve a user by their UserName
      tags:
      - user
  /users:
    get:
      description: Retrieve list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UsersList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      summary: Retrieve list of all users
      tags:
      - user
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
